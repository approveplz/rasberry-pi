# DOCKER COMPOSE FILE - Orchestrates multiple containers working together
# 
# WHAT IS DOCKER?
# - Docker packages applications and their dependencies into "containers"
# - Containers are like lightweight virtual machines that run the same way everywhere
# - Think of it as shipping your app in a standardized box that works on any computer
#
# WHAT IS DOCKER COMPOSE?  
# - Tool for defining and running multi-container Docker applications
# - Instead of running 4 separate "docker run" commands, this file defines everything
# - "docker-compose up" starts all services, "docker-compose down" stops them
#
# OUR MEDIA STACK:
# 1. API (custom) - Express.js server with torrent/streaming endpoints
# 2. Jackett - Searches torrent sites and provides a unified API
# 3. qBittorrent - Downloads torrents that Jackett finds  
# 4. Jellyfin - Media server that streams your downloaded movies
#
# HOW THEY WORK TOGETHER:
# API calls Jackett → Jackett finds torrents → API tells qBittorrent to download
# → Downloaded files appear in Jellyfin → API can stream via Jellyfin
#
# Docker Compose defines multiple containers that work together as a "stack"
# Each "service" below becomes a separate container when you run "docker-compose up"

services:
  # API Service - Our custom Express app
  api:
    # BUILD: Instead of using a pre-made image, build our own from the Dockerfile in ./api/
    build: ./api
    
    # CONTAINER NAME: Give this container a custom name instead of auto-generated one
    container_name: media-api
    
    # PORT MAPPING: Map host port 3000 to container port 3000
    # Format: "host_port:container_port" - so localhost:3000 reaches the app
    ports:
      - "3000:3000"
    
    # ENVIRONMENT VARIABLES: Set variables inside the container
    # These become process.env.NODE_ENV, process.env.JACKETT_URL, etc. in our Node.js app
    environment:
      - NODE_ENV=production
      # Docker containers can talk to each other by service name (like "jackett")
      # This is Docker's internal DNS - "jackett:9117" resolves to the jackett container
      - JACKETT_URL=http://jackett:9117
      - QBITTORRENT_URL=http://qbittorrent:8080
      - JELLYFIN_URL=http://jellyfin:8096
    
    # ENV FILE: Load environment variables from .env file (like API_PASSWORD)
    env_file:
      - .env
    
    # VOLUMES: Mount directories from host machine into container
    # Format: "host_path:container_path" - so ./downloads on your Mac becomes /app/downloads in container
    # This lets the container access files on your computer and persist data
    volumes:
      - ./downloads:/app/downloads
      - ./movies:/app/movies
    
    # DEPENDS_ON: Start these services before starting this one
    # Docker will start jackett, qbittorrent, jellyfin first, then this API
    depends_on:
      - jackett
      - qbittorrent
      - jellyfin
    
    # RESTART POLICY: Automatically restart if container crashes (unless manually stopped)
    restart: unless-stopped

  # JACKETT SERVICE - Torrent indexer (searches torrent sites for you)
  jackett:
    # IMAGE: Use a pre-built Docker image from Docker Hub (like downloading an app)
    # "latest" means get the newest version
    # LinuxServer.io images are popular, well-maintained community images
    image: lscr.io/linuxserver/jackett:latest
    container_name: jackett
    
    environment:
      # TZ: Set timezone so logs show correct time
      - TZ=Etc/UTC
    
    # PERSISTENT STORAGE: Store app settings and data outside container
    # When container is deleted, these files remain on your computer
    volumes:
      - ./config/jackett:/config      # App settings and configuration
      - ./downloads:/downloads        # Downloaded torrents go here
    
    # WEB UI ACCESS: Jackett runs a web interface on port 9117
    ports:
      - "9117:9117"
    restart: unless-stopped

  # QBITTORRENT SERVICE - The actual torrent downloading client
  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:latest
    container_name: qbittorrent
    
    environment:
      - TZ=Etc/UTC
      # Tell qBittorrent which port to use for its web interface
      - WEBUI_PORT=8080
    
    volumes:
      - ./config/qbittorrent:/config  # qBittorrent settings
      - ./downloads:/downloads        # Where downloaded files go
    
    ports:
      - "8080:8080"                   # Web UI for managing torrents
      - "6881:6881"                   # BitTorrent protocol ports (TCP)
      - "6881:6881/udp"              # BitTorrent protocol ports (UDP)
    restart: unless-stopped

  # JELLYFIN SERVICE - Media server (like your own Netflix)
  jellyfin:
    image: jellyfin/jellyfin:latest
    container_name: jellyfin
    
    environment:
      - TZ=Etc/UTC
    
    volumes:
      - ./config/jellyfin:/config     # Jellyfin database and settings
      - ./movies:/media/movies        # Your movie library
      - ./downloads:/media/downloads  # Recently downloaded files
    
    ports:
      - "8096:8096"                   # Jellyfin web interface
    
    # HARDWARE ACCELERATION: Commented out because macOS doesn't have /dev/dri
    # On Linux, this would let Jellyfin use GPU for video encoding
    # devices:
    #   - /dev/dri:/dev/dri # For hardware acceleration (only available on Linux)
    restart: unless-stopped

# DOCKER NETWORKS: Create a custom network so all containers can communicate
# Docker automatically creates DNS entries so "jackett" resolves to the jackett container
networks:
  default:
    name: media-network 